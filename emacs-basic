(load "/home/p/config/emacs-keybindings")
(load "/home/p/config/emacs-macros")

(shell-command "mkdir /tmp/emacs/ 1>/dev/null 2>/dev/null")

;;;; PREAMBLE ^^ / SETQ vv

; (in)sane defaults
(setq create-lockfiles nil) ; these are *trully* useless
(setq inhibit-startup-message t)
(setq scroll-error-top-bottom t)
(setq scroll-preserve-screen-position t)
(setq scroll-margin 2)
(setq scroll-conservatively 100)
(setq next-screen-context-lines 2)
(setq column-number-indicator-zero-based nil)
(setq split-height-threshold 30) ; prefer spliting horizontally ; 90
(setq vc-handled-backends '(Git))
(setq-default temporary-file-directory "/tmp/emacs")
(setq-default tab-width 2)
(setq-default window-divider-default-places 'right-only)
(setq-default kill-ring-max 30)
(setq-default message-log-max 100) ; as per `https://www.emacswiki.org/emacs/MessagesBuffers'
(setq-default select-enable-clipboard nil) ; as per `edoc://Clipboard.html'
(setq-default select-active-regions nil) ; as per `edoc://Primary-Selection.html'
(setq-default frame-title-format '("emacs@linux - %b")) ; as per `https://emacs.stackexchange.com/questions/16834/how-to-change-the-frame-title-from-emacshost-to-visited-file-name'
(setq-default inhibit-x-resources t) ; as per [C-h v inhibit-x-resources]
(setq-default indent-tabs-mode nil)
(setq-default sentence-end-double-space nil) ; Why the fuck would I do that?
(setq-default local-enable-local-variables nil) ; Why the fuck would I do that?
(setq-default ring-bell-function 'ignore) ; SHUT THE FUCK UP
(setq-default tab-bar-show 1)
(setq-default echo-keystrokes 0.1)
(setq-default vc-find-revision-no-save t)
(setq-default auto-save-list-file-prefix nil) ; STOP
(setq-default completion-ignore-case t) ; case-insensitive
(setq-default read-buffer-completion-ignore-case t) ; case-insensitive
(setq-default goal-column nil)
(setq-default gc-cons-threshold 600000) ;; 600 M
(setq-default confirm-kill-emacs 'y-or-n-p)
(setq-default backup-inhibited nil)
(setq-default auto-save-default t)
(setq-default hi-lock-face-defaults '("underline"))
(setq-local default-directory "/tmp/emacs/")

;;;; NON-SETQ

;; Autosave
(auto-save-mode)

; even more (in)sane defaults
(fset 'yes-or-no-p 'y-or-n-p) ;; make every "yes or no" question a "y or n" question

; remap

;; MODES

; C
(setq c-default-style "linux")
(setq c-basic-offset 2)

; Python
(setq python-basic-offset 2)
(setq python-indent-offset 2)

; Shell
(setq sh-basic-offset 2)

; EMACS DISABLED MODES (why?)
(setq-default disabled-command-function nil)

; WS
(setq-default whitespace-space-regexp "\\( +$\\)")
(setq-default whitespace-style
              '(face empty trailing spaces tab-mark))
(setq-default whitespace-display-mappings '(
              (tab-mark ?\x09 [?Â¦ ?\ ])))
(setq-default show-trailing-whitespace t)

; Icomplete
(defvar icomplete-minibuffer-map
  (let ((map (make-sparse-keymap)))
    ;(define-key map [remap minibuffer-complete-and-exit] 'icomplete-ret)
    (define-key map (kbd "TAB")   'icomplete-force-complete)
    (define-key map (kbd "C-j")   'icomplete-fido-exit)
    (define-key map (kbd "C-M-j") 'exit-minibuffer) ;; select default
    (define-key map (kbd "RET")   'icomplete-force-complete-and-exit)
    (define-key map (kbd "C-s")   'icomplete-forward-completions)
    (define-key map (kbd "C-r")   'icomplete-backward-completions)
    (define-key map (kbd "C-DEL") 'icomplete-fido-backward-updir)
    map)
  "Keymap used by `icomplete-mode' in the minibuffer'.")

; Hideshow
(defvar hs-minor-mode-map
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd "C-c C-s C-h") 'hs-hide-block)
    (define-key map (kbd "C-c C-s C-s") 'hs-show-block)
    (define-key map (kbd "C-c C-s M-h") 'hs-hide-all)
    (define-key map (kbd "C-c C-s M-s") 'hs-show-all)
    (define-key map (kbd "C-c C-s C-l") 'hs-hide-level)
    (define-key map (kbd "C-c C-s C-c") 'hs-toggle-hiding)
    map))

; Indent
(setq indent-rigidly-map
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd "h") 'indent-rigidly-left)
    (define-key map (kbd "l") 'indent-rigidly-right)
    (define-key map (kbd "H") 'indent-rigidly-left-to-tab-stop)
    (define-key map (kbd "L") 'indent-rigidly-right-to-tab-stop)
    map))

(icomplete-mode)
(electric-pair-mode)

(global-display-fill-column-indicator-mode)

;;;; HOOKS

(defun mh--desktop-save (desktop-dirname)
  (shell-command (format "mv -v %s/desktop %s/desktop-$(/home/mh/Scripts/date/short.sh)"
                   desktop-dirname desktop-dirname)))

(defun mh--desktop-read (desktop-dirname)
  (shell-command (format "ls -l %s" desktop-dirname))
  (setq desktop-base-file-name (read-from-minibuffer "Desktop filename: "))

  (desktop-read desktop-dirname)
  ; next saves are done in `desktop'
  (setq desktop-base-file-name "desktop"))

(add-hook 'text-mode-hook   'auto-fill-mode)
(add-hook 'c-mode-hook      (lambda () (interactive)
                              (setq comment-start "//")
                              (setq comment-end "")
                              (setq-local page-delimiter "^/\\{4\\}")
                              (hs-minor-mode t)
                              (abbrev-mode -1)))
(add-hook 'python-mode-hook  (lambda () (interactive)
                               (setq-local page-delimiter "^#\\{4\\}")
                               (hs-minor-mode t)))
(add-hook 'sh-mode-hook      (lambda () (interactive)
                               (setq-local page-delimiter "^#\\{4\\}")))

(add-hook 'lisp-mode-hook    (lambda () (interactive)
                               (setq-local page-delimiter "^;\\{4\\}")
                               (hs-minor-mode t)
                               (rainbow-delimiters-mode t)))
(add-hook 'scheme-mode-hook  (lambda () (interactive)
                               (setq-local page-delimiter "^;\\{4\\}")
                               (hs-minor-mode t)
                               (rainbow-delimiters-mode t)))
(add-hook 'emacs-lisp-mode-hook  (lambda () (interactive)
                                   (setq-local page-delimiter "^;\\{4\\}")
                                   (hs-minor-mode t)
                                   (rainbow-delimiters-mode t)))


(add-hook 'kill-emacs-hook
  (lambda () (interactive) (mh--desktop-save
                              "/home/mh/Emacs/desktop")))
(add-hook 'desktop-no-desktop-file-hook
  (lambda () (interactive) (mh--desktop-read
                             "/home/mh/Emacs/desktop")))

(defalias 'wm-mode 'edwina-mode)

;;;; EXWM/XSESSION (also emulates xsession's)

;; functor returning closures for shutdown/reboot
(defmacro acpi-for (acpi)
  `(lambda ()
    (interactive)
    (setenv "XINITSLEEP" (format "/home/mh/Scripts/bin/rc%s" ,acpi))
    (ansi-term "zsh" (format "%s-shell" ,acpi))
    (setenv "XINITSLEEP" nil)))

(defun emacsos/init (env/xsession)
  (unless (or (string= env/wm "tmux-tty")
              (string= env/wm "tty"))
    (find-file (format "%s/%s/%s.org" "/home/p/ORG/journal"
                       (format-time-string "%Y")
                       (format-time-string "%m"))))

  ;; suspend
  (global-set-key (kbd "C-x x M-s") (acpi-for "suspend"))

  ;; hibernate
  (global-set-key (kbd "C-x x M-d") (acpi-for "hibernate"))

  ;; halt (shutdown)
  (global-set-key (kbd "C-x x M-h") (acpi-for "shutdown"))

  ;; reboot
  (global-set-key (kbd "C-x x M-r") (acpi-for "reboot"))

  ;; start xsession of XESSION is set to 1
  (when (and (string= env/xsession "1")
             (not (file-exists-p "/tmp/xsession.lock")))
    (ansi-term "zsh" "xsession")
    (setenv "XINITSLEEP" nil)))

(let ((env/wm (getenv "WM"))
      (env/xsession (getenv "XSESSION")))
  (cond
   ;; emacs-xwm: exwm
   ((string= env/wm "emacs-xwm")
    ;; set and configure `exwm'
    (add-to-list 'load-path "/home/mh/Git/EMACS/xelb")
    (add-to-list 'load-path "/home/mh/Git/EMACS/exwm")
    (require 'exwm)
    (require 'exwm-config)
    (exwm-config-default)

    (emacsos/init env/xsession))

   ;; emacs-xsession: standard Xemacs
   ((or (string= env/wm "emacs-xsession")
        (string= env/wm "emacs-tty")
        (string= env/wm "tmux-tty")
        (string= env/wm "tty"))
    (emacsos/init env/xsession))))
