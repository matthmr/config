(load "/home/p/config/emacs-keybindings")
;(load "/home/p/config/emacs-functions")
(load "/home/p/config/emacs-macros")

(shell-command "mkdir /tmp/emacs/ 1>/dev/null 2>/dev/null")

; (in)sane defaults
(setq create-lockfiles nil) ; these are *trully* useless
(setq inhibit-startup-message t)
(setq scroll-error-top-bottom t)
(setq scroll-preserve-screen-position t)
(setq scroll-margin 2)
(setq scroll-conservatively 100)
(setq next-screen-context-lines 2)
(setq column-number-indicator-zero-based nil)
(setq split-height-threshold 30) ; prefer spliting horizontally ; 90
(setq vc-handled-backends '(Git))
(setq-default temporary-file-directory "/tmp/emacs")
(setq-default truncate-lines 0)
(setq-default tab-width 2)
(setq-default window-divider-default-places 'right-only)
(setq-default kill-ring-max 30)
(setq-default message-log-max 100) ; as per `https://www.emacswiki.org/emacs/MessagesBuffers'
(setq-default select-enable-clipboard nil) ; as per `edoc://Clipboard.html'
(setq-default select-active-regions nil) ; as per `edoc://Primary-Selection.html'
(setq-default frame-title-format '("emacs@linux - %b")) ; as per `https://emacs.stackexchange.com/questions/16834/how-to-change-the-frame-title-from-emacshost-to-visited-file-name'
(setq-default inhibit-x-resources t) ; as per [C-h v inhibit-x-resources]
(setq-default indent-tabs-mode nil)
(setq-default sentence-end-double-space nil) ; Why the fuck would I do that?
(setq-default local-enable-local-variables nil) ; Why the fuck would I do that?
(setq-default ring-bell-function 'ignore) ; SHUT THE FUCK UP
(setq-default tab-bar-show 1)
(setq-default echo-keystrokes 0.1)
(setq-default vc-find-revision-no-save t)
(setq-default auto-save-list-file-prefix nil) ; STOP
(setq-default completion-ignore-case t) ; case-insensitive
(setq-default read-buffer-completion-ignore-case t) ; case-insensitive
(setq-default read-file-name-completion-ignore-case t) ; case-insensitive
(setq-default goal-column nil)
(setq-default gc-cons-threshold 600000) ;; 600 M
(setq-default confirm-kill-emacs 'y-or-n-p)
(setq-default backup-inhibited nil)
(setq-default auto-save-default t)

;; Autosave
(auto-save-mode)

; even more (in)sane defaults
(fset 'yes-or-no-p 'y-or-n-p) ;; make every "yes or no" question a "y or n" question

; remap
;; MODES

; C
(setq c-default-style "linux")
(setq c-basic-offset 2)

; Python
(setq python-basic-offset 2)
(setq python-indent-offset 2)

; Shell
(setq sh-basic-offset 2)

;; EMACS DISABLED MODES (why?)
(setq-default disabled-command-function nil)

;; MODES
; WS
(setq-default whitespace-space-regexp "\\( +$\\)")
(setq-default whitespace-style
              '(face empty trailing spaces tab-mark))
(setq-default whitespace-display-mappings '(
              (tab-mark ?\x09 [?Â¦ ?\ ])))
(setq-default show-trailing-whitespace t)

;; Icomplete
(defvar icomplete-minibuffer-map
  (let ((map (make-sparse-keymap)))
    ;(define-key map [remap minibuffer-complete-and-exit] 'icomplete-ret)
    (define-key map (kbd "TAB")   'icomplete-force-complete)
    (define-key map (kbd "C-j")   'icomplete-ret)
    (define-key map (kbd "RET")   'icomplete-force-complete-and-exit)
    (define-key map (kbd "C-s")   'icomplete-forward-completions)
    (define-key map (kbd "C-r")   'icomplete-backward-completions)
    (define-key map (kbd "C-DEL") 'icomplete-fido-backward-updir)
    map)
  "Keymap used by `icomplete-mode' in the minibuffer'.")

(icomplete-mode t)

;; viper
(setq viper-mode t)
(require 'viper)

(viper-mode)

(define-key input-decode-map (kbd "C-[") (kbd "<escape>"))

(define-key viper-insert-basic-map "\C-d"  'delete-char)
;(define-key viper-insert-basic-map "\C-w" 'viper-delete-backward-word)
(define-key viper-insert-basic-map  "\C-t" 'transpose-chars)
(define-key viper-insert-basic-map  "\C-u"
  (lambda () (interactive)
    (if (eq current-prefix-arg nil)
      (setq current-prefix-arg 0))
    (call-interactively 'kill-line)))

(define-key viper-vi-basic-map  "\C-o"
  (lambda () (interactive)
    (if (eq current-prefix-arg nil)
      (setq current-prefix-arg t))
    (call-interactively 'set-mark-command)))

;; from `https://stackoverflow.com/questions/3393834/how-to-move-forward-and-backward-in-emacs-mark-ring'
(define-key viper-vi-basic-map  "\C-i"
  (lambda () (interactive)
    (when mark-ring
      (setq mark-ring (cons (copy-marker (mark-marker)) mark-ring))
      (set-marker (mark-marker) (car (last mark-ring)) (current-buffer))
      (when (null (mark t)) (ding))
      (setq mark-ring (nbutlast mark-ring))
      (goto-char (marker-position (car (last mark-ring)))))))

(define-key viper-vi-basic-map "\C-b"    'backward-char)
(define-key viper-vi-basic-map "\C-f"    'forward-char)

(define-key viper-vi-basic-map "u"       'undo)
(define-key viper-vi-basic-map "U"       'undo-redo)
(define-key viper-vi-basic-map "v"       'set-mark-command)
(define-key viper-vi-basic-map "V"       (lambda () (interactive)
                                          (move-beginning-of-line nil)
                                          (set-mark-command nil)
                                          (end-of-line)))
(define-key viper-vi-basic-map "g"       'beginning-of-buffer)

(define-key viper-vi-basic-map "\C-v"    'rectangle-mark-mode)

;; HOOKS
(add-hook 'text-mode-hook   'auto-fill-mode)
(add-hook 'c-mode-hook      (lambda () (interactive)
                              (setq comment-start "//")
                              (setq comment-end "")
                              (outline-minor-mode)))
(add-hook 'diff-mode-hook   'outline-minor-mode)
(add-hook 'lisp-mode-hook   'outline-minor-mode)
(add-hook 'python-mode-hook 'outline-minor-mode)
