export SHELL=/bin/zsh

#### ZSH opts

HISTFILE=@ZSH_HISTORY@
# min
HISTSIZE=500
# min
SAVEHIST=500
ZSH_MODE='vi'

case $TERM in
  'dumb'|'') ;;
  # min
  # *) tabs 2 2>/dev/null ;;
esac

setopt AUTOCD AUTOPUSHD NOBEEP PROMPT_SUBST HIST_IGNORE_SPACE
# setopt IGNORE_EOF

set -k

case $ZSH_MODE in
  'vi')
    source @ZSH_VI_MODE@;;
  'emacs')
    source @ZSH_EMACS_MODE@;;
  *)
    source @ZSH_EMACS_MODE@;;
esac

#### Function override

preexec() {
  ZSHTIME=$(zshtime)
  ZSHCMD="$1"
}

precmd() {
  local exit=$?

  vcs_info;
  local _zshtime=$ZSHTIME;
  ZSHTIME=$(zshtime);
  ELLAPSED=$(($ZSHTIME - $_zshtime))

  if (( $exit == 130 )); then
    return $exit
  fi

  if [[ ! -z "$ZSHCMD" ]]; then
    _ZSHCMD="$ZSHCMD"
    ZSHCMD=""
  elif [[ ! -z "$_ZSHCMD" ]]; then
    # echo "$_ZSHCMD"
    echo -n "Run: \`$_ZSHCMD' [Y/n] "

    local ans=''
    read -s -k1 ans
    if [[ "$ans" = $'\x0d' || "$ans" == $'\x0a' || "$ans" == 'y' ]]; then
      echo
      eval $_ZSHCMD
    else
      _ZSHCMD=""
    fi
  fi
}

chpwd () {
  SHORTPWD=$(shortpwd)
}

#### Git

autoload -Uz vcs_info

zstyle ':vcs_info:git:*' formats '@%F{reset}%B%b%F{red}'

#### Prompt

# [USER@HOST] [SHELL@TTY] [ELLAPSED EXIT]
# [PWD@HEAD]>

function zshtime() {
  echo "$(($(date +%s%0N) / 1000000))"
}

ZSHTIME=$(zshtime)

function shortpwd {
  # min
  # use this for abbreviating another user's path
  # echo "${PWD/$HOME/~}" | sed -E 's!(^(~[^/]+?/?|/)[^/]{,1}?|[^/]{,1})[^/]*/!\1/!g'
  echo "${PWD/#$HOME/~}" | sed -E 's!(^~?/[^/]{,1}?|[^/]{,1})[^/]*/!\1/!g'
}

SHORTPWD=$(shortpwd)

PROMPT='\
%F{red}[%F{reset}%B%n%b%F{red}@%F{reset}%B%m%b%F{red}] \
%F{red}[%F{reset}%Bzsh%b%F{red}@%F{reset}%B%l%b%F{red}] \
%F{red}[%F{reset}%B%D{%I%M%p}%b%F{red}@%F{reset}%B%D{%S}%b%F{red}] \
%F{red}[%F{reset}%B${ELLAPSED}ms%b%F{red}@%F{reset}%B%?%b%F{red}]
[%F{reset}%B${SHORTPWD}%b%F{red}${vcs_info_msg_0_}%b]>%F{reset} '
PS2='%F{red}>%F{reset} '

#### Completion
autoload -U compinit
compinit
_comp_options+=(globdots)

zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*' menu select

zmodload zsh/complist

#### Edit

autoload -Uz edit-command-line
zle -N edit-command-line
bindkey '^xe' edit-command-line

export FCEDIT=$EDITOR

#### Plugins
source @ZSH_PLUGINS@
source /usr/share/fzf/completion.zsh
source /usr/share/fzf/key-bindings.zsh

## `zsh-syntax-highlighting.plugin.zsh'
ZSH_HIGHLIGHT_STYLES[arg0]=fg=blue

#### FZF

__fzfcmd() {
  [ -n "${TMUX_PANE-}" ] && { [ "${FZF_TMUX:-0}" != 0 ] || [ -n "${FZF_TMUX_OPTS-}" ]; } &&
    echo "fzf-tmux ${FZF_TMUX_OPTS:--d${FZF_TMUX_HEIGHT:-40%}} -- " || echo "fzfc"
}

#### Confirm exit

function confirm_exit() {
  local ans

  printf 'Kill shell [Y/n] '

  read -s -k1 ans

  [[ "$ans" = $'\x0d' || "$ans" == 'y' ]] && exit || zle reset-prompt
}

zle -N confirm_exit
setopt IGNORE_EOF
bindkey '^D' confirm_exit
bindkey '^[^I' list-choices
bindkey '^[s' autosuggest-toggle

#### Common source
source @ZSH_ALIAS@
source @ZSH_FUNCTIONS@

#### GPG
export GPG_TTY=$(tty)

clear
tux

unset ZSH_MODE

if [[ ! -z "$LOGINCMD" ]]; then
  eval $LOGINCMD
  unset LOGINCMD
fi
