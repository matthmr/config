export SHELL=/bin/zsh

#### ZSH opts

HISTFILE=@ZSH_HISTORY@
# min
HISTSIZE=500
# min
SAVEHIST=500
ZSH_MODE='vi'

case $TERM in
  'dumb'|'') ;;
  # min
  # *) tabs 2 2>/dev/null ;;
esac

setopt AUTOCD AUTOPUSHD NOBEEP PROMPT_SUBST HIST_IGNORE_SPACE HIST_IGNORE_DUPS \
       HIST_IGNORE_ALLDUPS HIST_FIND_NO_DUPS HIST_SAVE_NO_DUPS
# setopt IGNORE_EOF

set -k

case $ZSH_MODE in
  'vi')
    source @ZSH_VI_MODE@;;
  'emacs')
    source @ZSH_EMACS_MODE@;;
  *)
    source @ZSH_EMACS_MODE@;;
esac

#### Function override

preexec() {
  ZSHTIME=$(zshtime)
  ZSHCMD="$1"
}

precmd() {
  local exit=$?

  vcs_info;
  local _zshtime=$ZSHTIME;
  ZSHTIME=$(zshtime);
  ELLAPSED=$(($ZSHTIME - $_zshtime))

  if (( $exit == 130 )); then
    return $exit
  fi

  if [[ ! -z "$ZSHCMD" ]]; then
    _ZSHCMD="$ZSHCMD"
    ZSHCMD=""
  elif [[ ! -z "$_ZSHCMD" ]]; then
    # echo "$_ZSHCMD"
    echo -n "Run: \`$_ZSHCMD' [Y/n] "

    local ans=''
    read -s -k1 ans
    if [[ "$ans" = $'\x0d' || "$ans" == $'\x0a' || "$ans" == 'y' ]]; then
      echo
      eval $_ZSHCMD
    else
      _ZSHCMD=""
    fi
  fi
}

chpwd () {
  SHORTPWD=$(shortpwd)
}

#### Git

autoload -Uz vcs_info

zstyle ':vcs_info:git:*' formats ' @%B%b%F{reset}'

#### Prompt

function zshtime() {
  echo "$(($(date +%s%0N) / 1000000))"
}

ZSHTIME=$(zshtime)

function shortpwd {
  # min
  # use this for abbreviating another user's path
  # echo "${PWD/$HOME/~}" | sed -E 's!(^(~[^/]+?/?|/)[^/]{,1}?|[^/]{,1})[^/]*/!\1/!g'
  echo "${PWD/#$HOME/~}" | sed -E 's!(^~?/[^/]{,1}?|[^/]{,1})[^/]*/!\1/!g'
}

SHORTPWD=$(shortpwd)

function prompt {
  local user='%B%n@%m%b'
  local cwd='%B${SHORTPWD}${vcs_info_msg_0_}%b'
  local tty='%B%l%b'
  local date='%B%D{%I%M%p}@%D{%S}%b'
  local run='%B${ELLAPSED}ms =%?%b'
  local sym="$(echo $PROMPT | /bin/sed -n '$s/\(.*\) \?/\1/p')"

  case $1 in
    '--help'|'-h')
      echo "Usage:       prompt (MODULE...|PROMPT_SYMBOL)"
      echo "Description: Modify \`zsh's prompt by loading modules"
      echo "Modules:
  - user: user- and hostname
  - cwd: CWD
  - tty: TTY file
  - date: current date
  - run: runtime info
  - PROMPT_SYMBOL (string): prompt symbol (on a new line)"
      return 0
      ;;
  esac

  PROMPT='%K{black}'

  for arg in $@; do
    case $arg in
     'user'|'cwd'|'tty'|'date'|'run')
        local mod_val="$(eval echo \$$arg)"

        PROMPT+="$mod_val : "
        ;;

      *) sym="$arg";;
    esac
  done

  PROMPT="${PROMPT% : }
%k$sym "
  PS2="$sym "
}

prompt cwd tty run \
      $([[ $TERM == 'linux' ]] && echo '>' || echo 'Î»')

# RPROMPT='%K{black}%B${ELLAPSED}ms : %?%b%k'

#### Completion
autoload -U compinit
compinit
_comp_options+=(globdots)

zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*' menu select

zmodload zsh/complist

#### Edit

autoload -Uz edit-command-line
zle -N edit-command-line
bindkey '^[e' edit-command-line

export FCEDIT=$EDITOR

#### Plugins
source @ZSH_PLUGINS@
source /usr/share/fzf/completion.zsh
source /usr/share/fzf/key-bindings.zsh

## `zsh-syntax-highlighting.plugin.zsh'
ZSH_HIGHLIGHT_STYLES[arg0]=fg=blue

#### FZF

__fzfcmd() {
  [ -n "${TMUX_PANE-}" ] && { [ "${FZF_TMUX:-0}" != 0 ] || [ -n "${FZF_TMUX_OPTS-}" ]; } &&
    echo "fzf-tmux ${FZF_TMUX_OPTS:--d${FZF_TMUX_HEIGHT:-40%}} -- " || echo "fzfc"
}

#### Confirm exit

function confirm_exit() {
  local ans

  printf '\nKill shell [Y/n] '

  read -s -k1 ans

  [[ "$ans" = $'\x0d' || "$ans" == 'y' ]] && exit || {
    printf "\x1b[2K\x1b[F\x1b[2C"
  }
  # zle reset-prompt
}

#### Toggle hist

function toggle_hist() {
  if [[ -z "$HISTFILE" ]]; then
    HISTFILE="$PREV_HISTFILE"
  else
    nohist
  fi

  echo "save: $HISTFILE"
}

function file_mgr {
  fm
}

function tput_reset {
  tput reset

  tux
  echo
  zle reset-prompt
}

zle -N confirm_exit
zle -N toggle_hist
zle -N file_mgr
zle -N tput_reset

setopt IGNORE_EOF
bindkey '^D' confirm_exit
bindkey '^[^I' list-choices
bindkey '^[s' autosuggest-toggle
bindkey '^[h' toggle_hist
bindkey '^[d' file_mgr
bindkey '^[r' tput_reset

#### Common source
source @ZSH_ALIAS@
source @ZSH_FUNCTIONS@

#### GPG
export GPG_TTY=$(tty)

clear
tux

unset ZSH_MODE

if [[ ! -z "$LOGINCMD" ]]; then
  eval $LOGINCMD
  unset LOGINCMD
fi
